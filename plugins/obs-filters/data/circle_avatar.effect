uniform float4x4 ViewProj;
uniform texture2d image;
uniform float2 u_face_center;
uniform float2 u_face_size;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float3 SampleTexture(float2 uv)
{
	float3 rgb = image.Sample(textureSampler, uv).rgb;
	return GetNonlinearColor(rgb);
}


float draw_circle(float2 coord, float radius) {
    return step(length(coord), radius);
}

float4 circle_crop(VertData v_in) : TARGET
{

    float4 frame = image.Sample(textureSampler, (v_in.uv * (u_face_size ) + u_face_center - float2(0.5, 0.5) * (u_face_size)));

    float2 scale = float2(16./9., 9./9.);

    float2 offset = float2(0.5 * 16./9., 0.5);

    float2 circle_coord = v_in.uv * scale;

    float circle = draw_circle(circle_coord - offset, 0.5);

	return frame + float4(circle - 1.);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = circle_crop(v_in);
	}
}