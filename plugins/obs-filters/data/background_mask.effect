uniform float4x4 ViewProj;
uniform texture2d mask;
uniform texture2d image;

uniform float2 u_texelSize;
uniform float u_step;
uniform float u_radius;
uniform float u_offset;
uniform float u_sigmaTexel;
uniform float u_sigmaColor;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float3 SampleTexture(float2 uv)
{
	float3 rgb = image.Sample(textureSampler, uv).rgb;
	return GetNonlinearColor(rgb);
}

float gaussian(float x, float sigma) {
	float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);
	return exp((x * x) * coeff);
}

float4 smooth_blend(VertData v_in) : TARGET
{
	float4 frame = image.Sample(textureSampler, v_in.uv);
	float4 ishuman = mask.Sample(textureSampler, v_in.uv);

    float2 centerCoord = v_in.uv;
    float3 centerColor =  image.Sample(textureSampler, centerCoord).rgb;
    float smoothed = 0.0;
    float spaceWeight = 0.0;
    float colorWeight = 0.0;
    float totalWeight = 0.0;
    for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {
        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {
            float2 shift = float2(j, i) * u_texelSize;
            float2 coord = float2(centerCoord + shift);
            float3 frameColor = image.Sample(textureSampler, coord).rgb;
            float outVal = 0.0;
            outVal = mask.Sample(textureSampler, coord).r;
            spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);
            colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);
            totalWeight += spaceWeight * colorWeight;
            smoothed += spaceWeight * colorWeight * outVal;
        }
    }
    smoothed /= totalWeight;
    smoothed = smoothstep(0.5,0.75, smoothed);
	return float4(frame.rgb*smoothed, smoothed);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = smooth_blend(v_in);
	}
}